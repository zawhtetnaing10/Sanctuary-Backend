// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post_likes.sql

package database

import (
	"context"
)

const createPostLike = `-- name: CreatePostLike :one
INSERT INTO post_likes(user_id, post_id, created_at, updated_at)
VALUES(
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, user_id, post_id, created_at, updated_at
`

type CreatePostLikeParams struct {
	UserID int64
	PostID int64
}

func (q *Queries) CreatePostLike(ctx context.Context, arg CreatePostLikeParams) (PostLike, error) {
	row := q.db.QueryRow(ctx, createPostLike, arg.UserID, arg.PostID)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostLike = `-- name: DeletePostLike :exec
DELETE FROM post_likes WHERE user_id=$1 AND post_id=$2
`

type DeletePostLikeParams struct {
	UserID int64
	PostID int64
}

func (q *Queries) DeletePostLike(ctx context.Context, arg DeletePostLikeParams) error {
	_, err := q.db.Exec(ctx, deletePostLike, arg.UserID, arg.PostID)
	return err
}

const getPostLike = `-- name: GetPostLike :one
SELECT id, user_id, post_id, created_at, updated_at FROM post_likes WHERE user_id=$1 AND post_id=$2 LIMIT 1
`

type GetPostLikeParams struct {
	UserID int64
	PostID int64
}

func (q *Queries) GetPostLike(ctx context.Context, arg GetPostLikeParams) (PostLike, error) {
	row := q.db.QueryRow(ctx, getPostLike, arg.UserID, arg.PostID)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
