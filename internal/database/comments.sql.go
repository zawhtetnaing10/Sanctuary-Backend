// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(content, user_id, post_id, created_at, updated_at)
VALUES(
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
RETURNING id, content, created_at, updated_at, deleted_at, user_id, post_id
`

type CreateCommentParams struct {
	Content string
	UserID  int64
	PostID  int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Content, arg.UserID, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getCommentsForPost = `-- name: GetCommentsForPost :many
SELECT
    c.id,
    c.content,
    c.created_at,
    c.updated_at,
    c.user_id,
    c.post_id,
    u.id AS author_id, 
    u.email AS author_email, 
    u.user_name AS author_user_name,
    u.full_name AS author_full_name,
    u.profile_image_url AS author_profile_image_url,
    u.dob AS author_dob,
    u.created_at AS author_created_at, 
    u.updated_at AS author_updated_at
FROM comments c 
INNER JOIN users u ON c.user_id = u.id
WHERE c.post_id = $1
ORDER BY c.created_at ASC
`

type GetCommentsForPostRow struct {
	ID                    int64
	Content               string
	CreatedAt             pgtype.Timestamp
	UpdatedAt             pgtype.Timestamp
	UserID                int64
	PostID                int64
	AuthorID              int64
	AuthorEmail           string
	AuthorUserName        string
	AuthorFullName        string
	AuthorProfileImageUrl pgtype.Text
	AuthorDob             pgtype.Date
	AuthorCreatedAt       pgtype.Timestamp
	AuthorUpdatedAt       pgtype.Timestamp
}

func (q *Queries) GetCommentsForPost(ctx context.Context, postID int64) ([]GetCommentsForPostRow, error) {
	rows, err := q.db.Query(ctx, getCommentsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsForPostRow
	for rows.Next() {
		var i GetCommentsForPostRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.PostID,
			&i.AuthorID,
			&i.AuthorEmail,
			&i.AuthorUserName,
			&i.AuthorFullName,
			&i.AuthorProfileImageUrl,
			&i.AuthorDob,
			&i.AuthorCreatedAt,
			&i.AuthorUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
