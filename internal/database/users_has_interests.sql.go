// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_has_interests.sql

package database

import (
	"context"
)

const createUsersHasInterests = `-- name: CreateUsersHasInterests :one
INSERT INTO users_has_interests(user_id, interest_id, created_at, updated_at)
VALUES(
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, user_id, interest_id, created_at, updated_at
`

type CreateUsersHasInterestsParams struct {
	UserID     int64
	InterestID int64
}

func (q *Queries) CreateUsersHasInterests(ctx context.Context, arg CreateUsersHasInterestsParams) (UsersHasInterest, error) {
	row := q.db.QueryRowContext(ctx, createUsersHasInterests, arg.UserID, arg.InterestID)
	var i UsersHasInterest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InterestID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllUsersHasInterests = `-- name: DeleteAllUsersHasInterests :exec
DELETE FROM users_has_interests
`

func (q *Queries) DeleteAllUsersHasInterests(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsersHasInterests)
	return err
}
