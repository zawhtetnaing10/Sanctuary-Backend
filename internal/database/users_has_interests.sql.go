// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_has_interests.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateUsersHasInterestsParams struct {
	UserID     int64
	InterestID int64
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

const deleteAllUsersHasInterests = `-- name: DeleteAllUsersHasInterests :exec
DELETE FROM users_has_interests
`

func (q *Queries) DeleteAllUsersHasInterests(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllUsersHasInterests)
	return err
}

const getDuplicateInterestIds = `-- name: GetDuplicateInterestIds :many
SELECT interest_id 
FROM users_has_interests
WHERE user_id = $1 AND interest_id = ANY($2::bigint[])
`

type GetDuplicateInterestIdsParams struct {
	UserID  int64
	Column2 []int64
}

func (q *Queries) GetDuplicateInterestIds(ctx context.Context, arg GetDuplicateInterestIdsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getDuplicateInterestIds, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var interest_id int64
		if err := rows.Scan(&interest_id); err != nil {
			return nil, err
		}
		items = append(items, interest_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
