// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(content, created_at, updated_at, user_id)
VALUES(
    $1,
    NOW(),
    NOW(),
    $2
)
RETURNING id, content, created_at, updated_at, deleted_at, user_id
`

type CreatePostParams struct {
	Content string
	UserID  int64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const deleteAllPosts = `-- name: DeleteAllPosts :exec
DELETE FROM posts
`

func (q *Queries) DeleteAllPosts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllPosts)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT
    p.id,
    p.content,
    p.created_at,
    p.updated_at,
    p.user_id,
    u.id AS author_id, 
    u.email AS author_email, 
    u.user_name AS author_user_name,
    u.full_name AS author_full_name,
    u.profile_image_url AS author_profile_image_url,
    u.dob AS author_dob,
    u.created_at AS author_created_at, 
    u.updated_at AS author_updated_at, 
    (SELECT COUNT(*) FROM post_likes pl WHERE pl.post_id = p.id) AS like_count,
    (SELECT COUNT(*) FROM comments c WHERE c.post_id = p.id) AS comment_count,
    (
        SELECT EXISTS(
            SELECT 1 FROM post_likes upl WHERE upl.post_id = p.id AND upl.user_id = $1
        )
    ) AS liked_by_user,
    CAST(COALESCE(ARRAY_AGG(pm.media_url ORDER BY pm.id) FILTER (WHERE pm.media_url IS NOT NULL), '{}'::text[]) AS text[]) AS media_urls_array

FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN post_media pm ON p.id = pm.post_id
WHERE p.deleted_at IS NULL 
GROUP BY
    p.id,               
    p.content,
    p.created_at,
    p.updated_at,
    p.user_id,
    u.id,               
    u.email,
    u.user_name,
    u.full_name,
    u.profile_image_url,
    u.dob,
    u.created_at,
    u.updated_at
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetAllPostsParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetAllPostsRow struct {
	ID                    int64
	Content               string
	CreatedAt             pgtype.Timestamp
	UpdatedAt             pgtype.Timestamp
	UserID                int64
	AuthorID              int64
	AuthorEmail           string
	AuthorUserName        string
	AuthorFullName        string
	AuthorProfileImageUrl pgtype.Text
	AuthorDob             pgtype.Date
	AuthorCreatedAt       pgtype.Timestamp
	AuthorUpdatedAt       pgtype.Timestamp
	LikeCount             int64
	CommentCount          int64
	LikedByUser           bool
	MediaUrlsArray        []string
}

func (q *Queries) GetAllPosts(ctx context.Context, arg GetAllPostsParams) ([]GetAllPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.AuthorID,
			&i.AuthorEmail,
			&i.AuthorUserName,
			&i.AuthorFullName,
			&i.AuthorProfileImageUrl,
			&i.AuthorDob,
			&i.AuthorCreatedAt,
			&i.AuthorUpdatedAt,
			&i.LikeCount,
			&i.CommentCount,
			&i.LikedByUser,
			&i.MediaUrlsArray,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT
    p.id,
    p.content,
    p.created_at,
    p.updated_at,
    p.user_id,
    u.id AS author_id, 
    u.email AS author_email, 
    u.user_name AS author_user_name,
    u.full_name AS author_full_name,
    u.profile_image_url AS author_profile_image_url,
    u.dob AS author_dob,
    u.created_at AS author_created_at, 
    u.updated_at AS author_updated_at, 
    (SELECT COUNT(*) FROM post_likes pl WHERE pl.post_id = p.id) AS like_count,
    (SELECT COUNT(*) FROM comments c WHERE c.post_id = p.id) AS comment_count,
    (
        SELECT EXISTS(
            SELECT 1 FROM post_likes upl WHERE upl.post_id = p.id AND upl.user_id = $1
        )
    ) AS liked_by_user,
    CAST(COALESCE(ARRAY_AGG(pm.media_url ORDER BY pm.id) FILTER (WHERE pm.media_url IS NOT NULL), '{}'::text[]) AS text[]) AS media_urls_array

FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN post_media pm ON p.id = pm.post_id
WHERE p.id = $2 AND p.deleted_at IS NULL 
GROUP BY
    p.id,               
    p.content,
    p.created_at,
    p.updated_at,
    p.user_id,
    u.id,               
    u.email,
    u.user_name,
    u.full_name,
    u.profile_image_url,
    u.dob,
    u.created_at,
    u.updated_at
`

type GetPostByIdParams struct {
	UserID int64
	ID     int64
}

type GetPostByIdRow struct {
	ID                    int64
	Content               string
	CreatedAt             pgtype.Timestamp
	UpdatedAt             pgtype.Timestamp
	UserID                int64
	AuthorID              int64
	AuthorEmail           string
	AuthorUserName        string
	AuthorFullName        string
	AuthorProfileImageUrl pgtype.Text
	AuthorDob             pgtype.Date
	AuthorCreatedAt       pgtype.Timestamp
	AuthorUpdatedAt       pgtype.Timestamp
	LikeCount             int64
	CommentCount          int64
	LikedByUser           bool
	MediaUrlsArray        []string
}

func (q *Queries) GetPostById(ctx context.Context, arg GetPostByIdParams) (GetPostByIdRow, error) {
	row := q.db.QueryRow(ctx, getPostById, arg.UserID, arg.ID)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.AuthorID,
		&i.AuthorEmail,
		&i.AuthorUserName,
		&i.AuthorFullName,
		&i.AuthorProfileImageUrl,
		&i.AuthorDob,
		&i.AuthorCreatedAt,
		&i.AuthorUpdatedAt,
		&i.LikeCount,
		&i.CommentCount,
		&i.LikedByUser,
		&i.MediaUrlsArray,
	)
	return i, err
}

const getPostsCount = `-- name: GetPostsCount :one
SELECT COUNT(*) FROM posts WHERE deleted_at is NULL
`

func (q *Queries) GetPostsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getPostsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
