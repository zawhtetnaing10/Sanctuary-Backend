// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, hashed_password, user_name, full_name, created_at, updated_at)
VALUES(
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	UserName       string
	FullName       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.UserName,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.ProfileImageUrl,
		&i.Dob,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at, deleted_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.ProfileImageUrl,
		&i.Dob,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at, deleted_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.ProfileImageUrl,
		&i.Dob,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
