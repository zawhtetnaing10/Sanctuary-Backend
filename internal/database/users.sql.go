// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    NOW(),
    NOW()
)
RETURNING id, email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email           string
	UserName        string
	FullName        string
	ProfileImageUrl sql.NullString
	Dob             sql.NullTime
	HashedPassword  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.UserName,
		arg.FullName,
		arg.ProfileImageUrl,
		arg.Dob,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.ProfileImageUrl,
		&i.Dob,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, user_name, full_name, profile_image_url, dob, hashed_password, created_at, updated_at, deleted_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.ProfileImageUrl,
		&i.Dob,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
